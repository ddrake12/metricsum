// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRequestCtx is a mock of RequestCtx interface.
type MockRequestCtx struct {
	ctrl     *gomock.Controller
	recorder *MockRequestCtxMockRecorder
}

// MockRequestCtxMockRecorder is the mock recorder for MockRequestCtx.
type MockRequestCtxMockRecorder struct {
	mock *MockRequestCtx
}

// NewMockRequestCtx creates a new mock instance.
func NewMockRequestCtx(ctrl *gomock.Controller) *MockRequestCtx {
	mock := &MockRequestCtx{ctrl: ctrl}
	mock.recorder = &MockRequestCtxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestCtx) EXPECT() *MockRequestCtxMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockRequestCtx) Error(msg string, statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", msg, statusCode)
}

// Error indicates an expected call of Error.
func (mr *MockRequestCtxMockRecorder) Error(msg, statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockRequestCtx)(nil).Error), msg, statusCode)
}

// PostBody mocks base method.
func (m *MockRequestCtx) PostBody() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBody")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// PostBody indicates an expected call of PostBody.
func (mr *MockRequestCtxMockRecorder) PostBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBody", reflect.TypeOf((*MockRequestCtx)(nil).PostBody))
}

// Time mocks base method.
func (m *MockRequestCtx) Time() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Time indicates an expected call of Time.
func (mr *MockRequestCtxMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockRequestCtx)(nil).Time))
}

// UserValue mocks base method.
func (m *MockRequestCtx) UserValue(key string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserValue", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// UserValue indicates an expected call of UserValue.
func (mr *MockRequestCtxMockRecorder) UserValue(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserValue", reflect.TypeOf((*MockRequestCtx)(nil).UserValue), key)
}
